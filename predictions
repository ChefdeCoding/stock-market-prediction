import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import xgboost as xgb

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.metrics import roc_curve, auc

file_path = "your path"

df = pd.read_csv(file_path, index_col=0, parse_dates=["Date"])
model = xgb.XGBClassifier()
print("Column Names:")
print(df.columns.tolist())

df = df.drop(columns=["KFC_increase", "KFC_changep"], errors='ignore')

# Calculate cumulative returns
cumulative_returns = (df[changep_cols] / 100 + 1).cumprod()

# Set up the plot
plt.figure(figsize=(14, 7))

for col in cumulative_returns.columns:
    plt.plot(df['Date'], cumulative_returns[col], label=col.replace('_changep', ''))

# Format the x-axis for dates
plt.gca().xaxis.set_major_locator(mdates.YearLocator())
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))
plt.gcf().autofmt_xdate()

# Add labels and title
plt.title('Cumulative Returns of Stocks Over Time')
plt.xlabel('Date')
plt.ylabel('Cumulative Return')
plt.legend(loc='upper left', bbox_to_anchor=(1, 1))
plt.tight_layout()
plt.show()

# Filter columns that end with '_changep'
changep_columns = [col for col in df.columns if col.endswith('changep')]

# Prepare the features and target variable
X = df[changep_columns]  # Use only '_changep' columns as features
y = (df["sp500_increase"] > 0).astype(int)  # Binary target (0 or 1)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, shuffle=False)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

models = {
    "Logistic Regression": LogisticRegression(max_iter=1000),
    "Random Forest": RandomForestClassifier(n_estimators=100, random_state=42),
    "SVM": SVC(probability=True, random_state=42),
    "XGBoost": XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)
}

plt.figure(figsize=(10, 8))

for name, model in models.items():
    # Train the model
    model.fit(X_train, y_train)
    
    # Get predicted probabilities (if supported)
    probs = model.predict_proba(X_test)[:, 1]  # Probability of class 1
    
    # Compute ROC curve and AUC
    fpr, tpr, _ = roc_curve(y_test, probs)
    roc_auc = auc(fpr, tpr)
    
    # Plot ROC curve
    plt.plot(fpr, tpr, label=f'{name} (AUC = {roc_auc:.2f})')

# Plot random guess line
plt.plot([0, 1], [0, 1], 'k--')

# Final Plot Formatting
plt.title('ROC Curves for Stock Market Prediction Models')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.legend(loc="lower right")
plt.grid(True)
plt.tight_layout()
plt.show()

# Import necessary libraries
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
import xgboost as xgb

# Define models
model_lr = LogisticRegression(random_state=42)
model_rf = RandomForestClassifier(random_state=42)
model_svm = SVC(probability=True, random_state=42)  # Ensure probability=True for predict_proba()
model_xgb = xgb.XGBClassifier(random_state=42)

# Fit the models
model_lr.fit(X_train_scaled, y_train)
model_rf.fit(X_train_scaled, y_train)
model_svm.fit(X_train_scaled, y_train)
model_xgb.fit(X_train_scaled, y_train)

# Make predictions
probs_lr = model_lr.predict_proba(X_test_scaled)[:, 1]
probs_rf = model_rf.predict_proba(X_test_scaled)[:, 1]
probs_svm = model_svm.predict_proba(X_test_scaled)[:, 1]
probs_xgb = model_xgb.predict_proba(X_test_scaled)[:, 1]

# Initialize plot
plt.figure(figsize=(10, 8))

# Plot ROC curves for each model
plot_roc_curve("Logistic Regression", y_test, probs_lr)
plot_roc_curve("Random Forest", y_test, probs_rf)
plot_roc_curve("SVM", y_test, probs_svm)
plot_roc_curve("XGBoost", y_test, probs_xgb)

# Plot the random guess line
plt.plot([0, 1], [0, 1], 'k--')

# Final plot settings
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curves for Stock Prediction Models')
plt.legend(loc='lower right')
plt.grid(True)
plt.tight_layout()

# Display the plot
plt.show()

