import pandas as pd
import numpy as np
from sklearn.svm import SVR
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score


# Load data
df = pd.read_csv('your_csv_path')
df['Date'] = pd.to_datetime(df['Date'])
df = df.sort_values('Date')

# Drop unnecessary columns
df = df.drop(columns=[col for col in df.columns if 'increase' in col or 'KFC' in col or col == 'Unnamed: 0'])

# Feature engineering: 5-day lags for each stock/index
tickers = ['sp500_changep', 'TSLA_changep', 'NVDA_changep', 'MSFT_changep', 'NFLX_changep']
window = 5

for ticker in tickers:
    for i in range(1, window + 1):
        df[f'{ticker}_lag{i}'] = df[ticker].shift(i)

df.dropna(inplace=True)

# Prepare features and targets
feature_cols = [f'{ticker}_lag{i}' for ticker in tickers for i in range(1, window + 1)]

# Container for predictions
rf_predictions = {}
last_date = df['Date'].max().date()

# Loop over each ticker to predict its % change 1 month ahead
for target in tickers:
    X = df[feature_cols]
    y = df[target].shift(-5)  # Predict 5 trading days ahead

    X_clean = X.iloc[:-5]
    y_clean = y.iloc[:-5]

    # Train/test split
    X_train, X_test, y_train, y_test = train_test_split(X_clean, y_clean, shuffle=False)

    # Scale features
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    # Random Forest Regressor
    rf = RandomForestRegressor(n_estimators=100, random_state=42)
    rf.fit(X_train_scaled, y_train)

    # Predict for latest data
    latest_window = df[feature_cols].iloc[[-1]]
    latest_scaled = scaler.transform(latest_window)
    pred = rf.predict(latest_scaled)[0]
    rf_predictions[target] = pred

    # Evaluate on test set
    y_pred = rf.predict(X_test_scaled)

    mae = mean_absolute_error(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    rmse = np.sqrt(mse)
    r2 = r2_score(y_test, y_pred)

    print(f"\n--- {target.replace('_changep','')} (Random Forest) Evaluation ---")
    print(f"MAE : {mae:.4f}")
    print(f"MSE : {mse:.4f}")
    print(f"RMSE: {rmse:.4f}")
    print(f"RÂ²  : {r2:.4f}")
    print(f"Next 5-Day Forecast (% change): {pred:.4f}")

# Plot recent trends + predictions
plt.figure(figsize=(12, 6))
colors = {
    'TSLA_changep': 'blue',
    'MSFT_changep': 'green',
    'NFLX_changep': 'purple',
    'NVDA_changep': 'orange',
    'sp500_changep': 'black'
}

for ticker in tickers:
    plt.plot(df['Date'].iloc[-60:-21], df[ticker].iloc[-60:-21], label=f"{ticker.replace('_changep','')} Recent", color=colors[ticker])
    plt.axhline(rf_predictions[ticker], linestyle='--', color=colors[ticker], label=f"{ticker.replace('_changep','')} 5-Day Prediction: {rf_predictions[ticker]:.2f}%")

plt.title('5-Day Ahead Predictions using Random Forest')
plt.xlabel('Date')
plt.ylabel('% Change')
plt.legend(loc='best')
plt.grid(True)
plt.tight_layout()
plt.show()
